---
description: 
globs: *.tsx
alwaysApply: false
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Next.js ベストプラクティス実装ルール

## 1. ルーティングとファイル構造

### ディレクトリ構造例

src/
├── app/                    # ルーティングとページコンポーネント
│   ├── (marketing)/       # ランディングページ、プライシング、お問い合わせなど
│   │   ├── about/
│   │   ├── pricing/
│   │   └── contact/
│   ├── (dashboard)/       # ログイン後のメイン機能
│   │   ├── projects/
│   │   ├── settings/
│   │   └── profile/
│   └── api/               # APIルート
│
├── components/            # Reactコンポーネント
│   ├── common/           # 共通コンポーネント
│   │   ├── buttons/
│   │   ├── forms/
│   │   ├── icons/
│   │   └── typography/
│   ├── features/         # 機能別コンポーネント
│   │   ├── dashboard/    # ダッシュボード関連
│   │   └── marketing/    # マーケティングページ関連
│   └── layouts/          # レイアウトコンポーネント
│       ├── marketing/
│       └── dashboard/
│
├── hooks/                # カスタムフック
│   ├── auth/
│   ├── form/
│   └── query/
│
├── lib/                  # ユーティリティ関数
│   ├── constants/        # 定数
│   │   ├── config/
│   │   └── messages/
│   ├── types/           # 型定義
│   └── utils/           # ヘルパー関数
│       ├── date/
│       ├── format/
│       └── validation/
│
├── dal/            # Data Access Layer
│   │── auth/
│   │── projects/
│
│
└── public/             # 静的アセット
    ├── images/
    │   ├── marketing/
    │   └── dashboard/
    ├── fonts/
    └── icons/

### 命名規則

- ページコンポーネント: `page.tsx`
- レイアウトコンポーネント: `layout.tsx`
- ローディング状態: `loading.tsx`
- エラーハンドリング: `error.tsx`
- 404 ページ: `not-found.tsx`

## 2. コンポーネント設計

### Server Components

- **デフォルトで Server Components を使用**
- **データフェッチングを含むコンポーネントは Server Components で実装**
- SEO 対応が必要なコンポーネントは Server Components で実装

### Client Components

以下の場合のみ Client Components を使用:

- ブラウザ API を使用する場合
- イベントリスナーが必要な場合
- React hooks を使用する場合
- クライアントサイドの状態管理が必要な場合

### 'use client' ディレクティブ

```typescript
"use client";
// クライアントコンポーネントの先頭に記述
```

## 3. API実装

- データフェッチ用のAPIはなるべく作成しないでください。サーバーコンポーネントでのデータフェッチを強く推奨します。
- `app/api`ディレクトリ内に API エンドポイントを作成
- HTTP メソッドごとに適切なハンドラーを実装:
- GET の API はなるべく作らないでください。データフェッチはサーバーコンポーネントでお願いします。
- API の仕様は POST/PATCH/PUT/DELETE のみに絞ってください。

```typescript
// app/api/articles/route.ts
import { NextResponse } from "next/server";

// POST: 新規記事の作成
export async function POST(request: Request) {
  try {
    const data = await request.json();
    const article = await prisma.article.create({
      data,
    });
    return NextResponse.json(article, { status: 201 });
  } catch (error) {
    return NextResponse.json(
      { error: "Internal Server Error" },
      { status: 500 }
    );
  }
}
```

### クライアントサイドでのユーザーデータ操作

- `fetch` を使用して API を呼び出し
- エラーハンドリングとローディング状態の管理:
- ServerActionsでも可

```typescript
// components/articles/create-article.tsx
"use client";

export async function createArticle(data: ArticleData) {
  try {
    const response = await fetch("/api/articles", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error("API request failed");
    }

    return await response.json();
  } catch (error) {
    console.error("Error creating article:", error);
    throw error;
  }
}
```

### キャッシュと再検証

- デフォルトでキャッシュを活用
- 適切な再検証戦略を選択:

```typescript
// ISRの場合
fetch(url, { next: { revalidate: 3600 } }); // 1時間ごとに再検証

// キャッシュを無効化する場合
fetch(url, { cache: "no-store" });
```

### エラーハンドリング

- API レスポンスには適切なステータスコードとエラーメッセージを含める
- クライアントサイドでは適切なエラーハンドリングとユーザーフィードバックを実装
- try-catch ブロックを使用して例外を適切に処理

### セキュリティ

- API ルートでは適切な認証・認可チェックを実装
- 入力値のバリデーションを実施、特にサーバーサイドでのバリデーション
- レートリミットの実装を検討

## 4. パフォーマンス最適化

### 画像最適化

- `next/image`コンポーネントを使用

```typescript
import Image from "next/image";

<Image
  src="/path/to/image.jpg"
  alt="説明"
  width={800}
  height={600}
  priority={true} // 重要な画像の場合
/>;
```

### スクリプト最適化

- `next/script`を使用して外部スクリプトを最適化

```typescript
import Script from "next/script";

<Script src="https://example.com/script.js" strategy="lazyOnload" />;
```

## 5. エラーハンドリング

### エラーバウンダリ

- `error.tsx`ファイルでエラーをキャッチ
- ユーザーフレンドリーなエラーメッセージを表示

### ローディング状態

- `loading.tsx`でローディング状態を管理
- Suspense を使用して細かい粒度でローディングを制御

## 6. 型安全性

### TypeScript

- 厳格な型チェックを有効化

```json
{
  "compilerOptions": {
    "strict": true,
    "forceConsistentCasingInFileNames": true
  }
}
```

### API ルート

- リクエスト/レスポンスの型を定義

```typescript
type ResponseData = {
  message: string;
};
```

## 7. セキュリティ

### 環境変数

- 機密情報は`.env`に保存
- 公開する環境変数は`NEXT_PUBLIC_`プレフィックスを使用

### CSP (Content Security Policy)

- 適切な CSP ヘッダーを設定
- `next.config.js`でセキュリティヘッダーを構成

## 8. ファイル命名とVercelデプロイ対応

### ファイル名の大文字小文字統一

**重要**: Vercelデプロイ時のビルドエラーを防ぐため、以下のルールを厳守すること

#### 問題の背景
- **ローカル環境（macOS）**: 大文字小文字を区別しない（Case-insensitive）
- **Vercel環境（Linux）**: 大文字小文字を厳密に区別する（Case-sensitive）
- この違いにより、ローカルでは動作するがVercelでビルドエラーになる問題が発生

#### 必須ルール

1. **CSSモジュールファイル名は小文字で統一**
   ```
   ✅ 正しい: mainVisImage.module.css
   ❌ 間違い: MainVisImage.module.css
   ```

2. **importパスとファイル名の完全一致**
   ```typescript
   // ファイル名: mainVisImage.module.css
   import styles from "@/app/styles/module/mainVisImage.module.css"; // ✅
   import styles from "@/app/styles/module/MainVisImage.module.css"; // ❌
   ```

3. **Gitの追跡状況確認**
   ```bash
   # 追跡されているファイルを確認
   git ls-files app/styles/module/ | grep -i "filename"
   
   # 大文字小文字の不整合がある場合の修正
   git rm app/styles/module/OldFileName.module.css
   git add app/styles/module/newFileName.module.css
   ```

#### トラブルシューティング

**症状**: Vercelで「Module not found」エラー
```
Module not found: Can't resolve '@/app/styles/module/fileName.module.css'
```

**解決手順**:
1. ローカルファイル名とGit追跡ファイル名の確認
2. 大文字小文字の不整合を修正
3. `.next`ディレクトリを削除してキャッシュクリア
4. 修正をコミット・プッシュ

#### 予防策

- ファイル作成時は必ず小文字で命名
- コンポーネント名とファイル名を区別（コンポーネント: PascalCase、ファイル: camelCase）
- 定期的な`git ls-files`でのファイル名確認

## 9. デプロイメント

### ビルド最適化

- 本番環境では常に本番ビルドを使用
- 適切なキャッシュ戦略を実装

### 環境変数

- 環境ごとに適切な環境変数を設定
- 本番環境の環境変数は安全に管理

## 10. メンテナンス

### 依存関係

- 定期的に依存パッケージを更新
- セキュリティ脆弱性をモニタリング

### パフォーマンスモニタリング

- Core Web Vitals を定期的に確認
- エラーログを監視